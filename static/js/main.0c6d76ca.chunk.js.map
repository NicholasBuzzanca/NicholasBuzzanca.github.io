{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["extend","OrbitControls","SpaceShip","_useState","useState","_useState2","_slicedToArray","model","setModel","useEffect","GLTFLoader","load","React","createElement","object","scene","Controls","orbitRef","useRef","_useThree","useThree","camera","gl","useRender","current","update","args","domElement","autoRotate","enablePan","enableZoom","enableDamping","ref","App","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","Fragment","className","target","rel","href","Canvas","position","onCreated","_ref","shadowMap","enabled","type","THREE","attach","castShadow","penumbra","intensity","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAOAA,YAAO,CAAEC,oBAET,IAAMC,EAAY,WAChB,IAAAC,EAA0BC,qBAAUC,EAAAC,YAAAH,EAAA,GAA7BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAKtB,OAJAI,qBAAU,YACR,IAAIC,KAAaC,KAAK,qBAAsBH,KAE3C,IACID,EAAQK,IAAAC,cAAA,aAAWC,OAAQP,EAAMQ,QAAY,MAGhDC,EAAW,WACf,IAAMC,EAAWC,mBACjBC,EAAuBC,cAAfC,EAAMF,EAANE,OAAQC,EAAEH,EAAFG,GAMhB,OAJAC,aAAU,WACRN,EAASO,QAAQC,YAIjBb,IAAAC,cAAA,iBACEa,KAAM,CAACL,EAAQC,EAAGK,YAClBC,YAAU,EACVC,WAAW,EACXC,YAAY,EACZC,eAAa,EACbC,IAAKf,KAuCIgB,EAnCN,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,OAAAK,YAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,WAgCJ,OAhCIC,YAAAR,EAAA,EAAAS,IAAA,SAAAC,MAEP,WACI,OACE/B,IAAAC,cAACD,IAAMgC,SAAQ,KACbhC,IAAAC,cAAA,OAAKgC,UAAU,SACbjC,IAAAC,cAAA,YAAMD,IAAAC,cAAA,KAAGiC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,qCAAoC,WAC5FpC,IAAAC,cAAA,YAAMD,IAAAC,cAAA,KAAGiC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,iCAAgC,WACxFpC,IAAAC,cAAA,YAAMD,IAAAC,cAAA,KAAGiC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,kDAAiD,cAE3GpC,IAAAC,cAAA,OAAKgC,UAAU,SACbjC,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAG,uBAGTD,IAAAC,cAACoC,IAAM,CACL5B,OAAQ,CACN6B,SAAU,CAAC,EAAE,EAAE,KAEjBC,UAAW,SAAAC,GAAa,IAAV9B,EAAE8B,EAAF9B,GACZA,EAAG+B,UAAUC,SAAU,EACvBhC,EAAG+B,UAAUE,KAAOC,qBAGxB5C,IAAAC,cAAA,OAAK4C,OAAO,MAAM/B,KAAM,CAAC,SAAU,GAAI,MACvCd,IAAAC,cAACG,EAAQ,MACTJ,IAAAC,cAAA,aAAW6C,YAAU,EAACR,SAAU,CAAC,GAAG,GAAG,GAAIS,SAAU,IACrD/C,IAAAC,cAAA,gBAAc+C,UAAW,KACzBhD,IAAAC,cAACX,EAAS,YAIX+B,EAhCI,CAASrB,IAAMiD,WCzBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxD,IAAAC,cAACoB,EAAG,MAAKoC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c6d76ca.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { Canvas, extend, useRender, useThree } from 'react-three-fiber';\nimport './App.css';\n\nextend({ OrbitControls });\n\nconst SpaceShip = () => {\n  const [model, setModel] = useState();\n  useEffect(() => {\n    new GLTFLoader().load('/static/scene.gltf', setModel)\n\n  }, []);\n  return model ? <primitive object={model.scene} /> : null;\n}\n\nconst Controls = () => {\n  const orbitRef = useRef();\n  const { camera, gl } = useThree();\n\n  useRender(() => {\n    orbitRef.current.update()\n  })\n\n  return (\n    <orbitControls\n      args={[camera, gl.domElement]}\n      autoRotate\n      enablePan={false}\n      enableZoom={false}\n      enableDamping\n      ref={orbitRef} />\n  )\n}\n\nclass App extends React.Component {\n  \n  render() {\n      return (\n        <React.Fragment>\n          <div className=\"links\">\n            <span><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"/static/nbresume319.pdf\">RESUME</a></span>\n            <span><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"//github.com/NicholasBuzzanca\">GITHUB</a></span>\n            <span><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"//linkedin.com/in/nicholas-buzzanca-1a7899119/\">LINKEDIN</a></span>\n          </div>\n          <div className=\"intro\">\n            <h1>Nicholas Buzzanca</h1>\n            <p>Software Developer</p>\n          </div>\n\n      <Canvas\n        camera={{\n          position: [0,0,15]\n        }}\n        onCreated={({ gl }) => {\n          gl.shadowMap.enabled = true;\n          gl.shadowMap.type = THREE.PCFSoftShadowMap;\n        }}\n        >\n      <fog attach=\"fog\" args={[0xcc7b32, 16, 20]} />\n      <Controls />\n      <spotLight castShadow position={[15,20,5]} penumbra={1} />\n      <ambientLight intensity={0.5} />\n      <SpaceShip />\n      </Canvas>\n      </React.Fragment>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}